{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"page.38fc8143.js","sourceRoot":"..","sourcesContent":["const validityErrorMessages = {\r\n    tooShort: 'URL too short (at least 3 characters)',\r\n    allreadyUsed: 'This URL is allready in use ðŸ˜’',\r\n    unacceptableChars: 'Only use the chars a-z, A-Z, 0-9, -, _'\r\n}\r\n\r\n\r\n\r\nwindow.onload = () => {\r\n    console.log('TS for shortyRS loaded.')\r\n\r\n    // set custom short url prefix display\r\n    const prefixDisplay = document.getElementById('url-prefix')\r\n    prefixDisplay.textContent = `${location.host}/`\r\n\r\n    \r\n    // --- long url ---\r\n\r\n    const longUrlInput: HTMLInputElement = <HTMLInputElement> document.getElementById('long-url')\r\n    const longValidityInfo: HTMLParagraphElement = <HTMLParagraphElement> document.getElementById('long-validity-message')\r\n\r\n    async function validateLong() {\r\n        const url = longUrlInput.value\r\n        if (url.length == 0) {\r\n            longUrlInput.classList.remove('valid', 'invalid')\r\n            longValidityInfo.style.display = 'none'\r\n            return\r\n        }\r\n\r\n        const res = await fetch(`/free?long=${url}`)\r\n        if (res.status != 200) {\r\n            longUrlInput.classList.add('invalid')\r\n            longUrlInput.classList.remove('valid')\r\n            longValidityInfo.style.display = 'block'\r\n            longValidityInfo.textContent = await res.text()\r\n        }\r\n        else {\r\n            longUrlInput.classList.add('valid')\r\n            longUrlInput.classList.remove('invalid')\r\n            longValidityInfo.style.display = 'none'\r\n        }\r\n    }\r\n\r\n    longUrlInput.oninput = validateLong\r\n\r\n    // --- custom short url ---\r\n    \r\n    const useCustomUrlButton: HTMLInputElement = <HTMLInputElement> document.getElementById('provide-short-url')\r\n    const customUrlInput: HTMLInputElement = <HTMLInputElement> document.getElementById('short-url')\r\n    const shortValidityInfo: HTMLParagraphElement = <HTMLParagraphElement> document.getElementById('short-validity-message')\r\n\r\n    shortValidityInfo.style.display = 'none'\r\n\r\n    async function validateShort() {\r\n        const url = customUrlInput.value\r\n        if (url.length < 3) {\r\n            shortValidityInfo.style.display = 'block'\r\n            shortValidityInfo.textContent = validityErrorMessages.tooShort\r\n            customUrlInput.classList.remove('valid')\r\n            customUrlInput.classList.add('invalid')\r\n            return\r\n        }\r\n\r\n        if (!/^[\\w|\\d|\\-|_]*$/g.test(url)) {\r\n            shortValidityInfo.style.display = 'block'\r\n            shortValidityInfo.textContent = validityErrorMessages.unacceptableChars\r\n            customUrlInput.classList.remove('valid')\r\n            customUrlInput.classList.add('invalid')\r\n            return\r\n        }\r\n\r\n        let res = await fetch(`/free?short=${url}`)\r\n        if (!res.ok) {\r\n            shortValidityInfo.style.display = 'block'\r\n            shortValidityInfo.textContent = validityErrorMessages.allreadyUsed\r\n            customUrlInput.classList.remove('valid')\r\n            customUrlInput.classList.add('invalid')\r\n            return\r\n        }\r\n\r\n        shortValidityInfo.style.display = 'none'\r\n        customUrlInput.classList.add('valid')\r\n        customUrlInput.classList.remove('invalid')\r\n    }\r\n\r\n    customUrlInput.oninput = validateShort\r\n    \r\n    useCustomUrlButton.onchange = evt => {\r\n        const use = useCustomUrlButton.checked\r\n        customUrlInput.disabled = !use\r\n        if(use) {\r\n            // validate\r\n            validateShort()\r\n        }\r\n        else {\r\n            customUrlInput.classList.remove('valid', 'invalid')\r\n        }       \r\n    }\r\n}"]}